Terminals unused in grammar

   NUMBER


State 5 conflicts: 2 shift/reduce
State 16 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: INTEGER_NUM
    3       | REAL_NUM
    4       | LPAREN FUNC s_expr_list RPAREN
    5       | LPAREN SYMBOL s_expr_list RPAREN
    6       | SYMBOL
    7       | LPAREN let_section s_expr RPAREN
    8       | LPAREN COND s_expr s_expr s_expr RPAREN
    9       | QUIT
   10       | error

   11 s_expr_list: s_expr s_expr_list
   12            | s_expr
   13            | %empty

   14 let_section: LPAREN let_list RPAREN
   15            | %empty

   16 let_list: let_list let_elem
   17         | LET let_elem

   18 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN
   19         | LPAREN SYMBOL s_expr RPAREN
   20         | LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   21         | LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   22 arg_list: SYMBOL arg_list
   23         | SYMBOL


Terminals, with rules where they appear

$end (0) 0
error (256) 10
FUNC (258) 4
SYMBOL (259) 5 6 18 19 20 21 22 23
NUMBER (260)
INTEGER_NUM (261) 2
REAL_NUM (262) 3
TYPE (263) 18 20
LPAREN (264) 4 5 7 8 14 18 19 20 21
RPAREN (265) 4 5 7 8 14 18 19 20 21
LET (266) 17
EOL (267) 1
QUIT (268) 9
COND (269) 8
LAMBDA (270) 20 21


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
program (17)
    on left: 1, on right: 0
s_expr (18)
    on left: 2 3 4 5 6 7 8 9 10, on right: 1 7 8 11 12 18 19 20 21
s_expr_list (19)
    on left: 11 12 13, on right: 4 5 11
let_section (20)
    on left: 14 15, on right: 7
let_list (21)
    on left: 16 17, on right: 14 16
let_elem (22)
    on left: 18 19 20 21, on right: 16 17
arg_list (23)
    on left: 22 23, on right: 20 21 22


State 0

    0 $accept: . program $end

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8


State 1

   10 s_expr: error .

    $default  reduce using rule 10 (s_expr)


State 2

    6 s_expr: SYMBOL .

    $default  reduce using rule 6 (s_expr)


State 3

    2 s_expr: INTEGER_NUM .

    $default  reduce using rule 2 (s_expr)


State 4

    3 s_expr: REAL_NUM .

    $default  reduce using rule 3 (s_expr)


State 5

    4 s_expr: LPAREN . FUNC s_expr_list RPAREN
    5       | LPAREN . SYMBOL s_expr_list RPAREN
    7       | LPAREN . let_section s_expr RPAREN
    8       | LPAREN . COND s_expr s_expr s_expr RPAREN

    FUNC    shift, and go to state 9
    SYMBOL  shift, and go to state 10
    LPAREN  shift, and go to state 11
    COND    shift, and go to state 12

    SYMBOL    [reduce using rule 15 (let_section)]
    LPAREN    [reduce using rule 15 (let_section)]
    $default  reduce using rule 15 (let_section)

    let_section  go to state 13


State 6

    9 s_expr: QUIT .

    $default  reduce using rule 9 (s_expr)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 14


State 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 15


State 9

    4 s_expr: LPAREN FUNC . s_expr_list RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    RPAREN  reduce using rule 13 (s_expr_list)

    s_expr       go to state 16
    s_expr_list  go to state 17


State 10

    5 s_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    RPAREN  reduce using rule 13 (s_expr_list)

    s_expr       go to state 16
    s_expr_list  go to state 18


State 11

   14 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 19

    let_list  go to state 20


State 12

    8 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    s_expr  go to state 21


State 13

    7 s_expr: LPAREN let_section . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    s_expr  go to state 22


State 14

    0 $accept: program $end .

    $default  accept


State 15

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 16

   11 s_expr_list: s_expr . s_expr_list
   12            | s_expr .

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    RPAREN  reduce using rule 12 (s_expr_list)
    RPAREN  [reduce using rule 13 (s_expr_list)]

    s_expr       go to state 16
    s_expr_list  go to state 23


State 17

    4 s_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 24


State 18

    5 s_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 25


State 19

   17 let_list: LET . let_elem

    LPAREN  shift, and go to state 26

    let_elem  go to state 27


State 20

   14 let_section: LPAREN let_list . RPAREN
   16 let_list: let_list . let_elem

    LPAREN  shift, and go to state 26
    RPAREN  shift, and go to state 28

    let_elem  go to state 29


State 21

    8 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    s_expr  go to state 30


State 22

    7 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 31


State 23

   11 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 11 (s_expr_list)


State 24

    4 s_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 4 (s_expr)


State 25

    5 s_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 5 (s_expr)


State 26

   18 let_elem: LPAREN . TYPE SYMBOL s_expr RPAREN
   19         | LPAREN . SYMBOL s_expr RPAREN
   20         | LPAREN . TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   21         | LPAREN . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 32
    TYPE    shift, and go to state 33


State 27

   17 let_list: LET let_elem .

    $default  reduce using rule 17 (let_list)


State 28

   14 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 14 (let_section)


State 29

   16 let_list: let_list let_elem .

    $default  reduce using rule 16 (let_list)


State 30

    8 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    s_expr  go to state 34


State 31

    7 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


State 32

   19 let_elem: LPAREN SYMBOL . s_expr RPAREN
   21         | LPAREN SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    LAMBDA       shift, and go to state 35

    s_expr  go to state 36


State 33

   18 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN
   20         | LPAREN TYPE . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 37


State 34

    8 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 38


State 35

   21 let_elem: LPAREN SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 39


State 36

   19 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 40


State 37

   18 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN
   20         | LPAREN TYPE SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    LAMBDA       shift, and go to state 41

    s_expr  go to state 42


State 38

    8 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 8 (s_expr)


State 39

   21 let_elem: LPAREN SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 43

    arg_list  go to state 44


State 40

   19 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 19 (let_elem)


State 41

   20 let_elem: LPAREN TYPE SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 45


State 42

   18 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 46


State 43

   22 arg_list: SYMBOL . arg_list
   23         | SYMBOL .

    SYMBOL  shift, and go to state 43

    $default  reduce using rule 23 (arg_list)

    arg_list  go to state 47


State 44

   21 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 48


State 45

   20 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 43

    arg_list  go to state 49


State 46

   18 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 18 (let_elem)


State 47

   22 arg_list: SYMBOL arg_list .

    $default  reduce using rule 22 (arg_list)


State 48

   21 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    s_expr  go to state 50


State 49

   20 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 51


State 50

   21 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 52


State 51

   20 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INTEGER_NUM  shift, and go to state 3
    REAL_NUM     shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6

    s_expr  go to state 53


State 52

   21 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 21 (let_elem)


State 53

   20 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 54


State 54

   20 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 20 (let_elem)
